import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from states import FAQ
from UTILS import send_and_remember
from KEYBOARDS import get_back_keyboard

ITEMS_PER_PAGE = 5

def load_faq_data():
    try:
        with open('data/faq.json', 'r', encoding='utf-8') as file:
            return json.load(file)['faq_items']
    except FileNotFoundError:
        return []

def get_faq_keyboard(current_page: int, total_pages: int) -> InlineKeyboardMarkup:
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if current_page > 0:
        nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"faq_page_{current_page-1}"))
    if current_page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"faq_page_{current_page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])
    
    return InlineKeyboardMarkup(keyboard)

def format_faq_page(items: list, page: int) -> str:
    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_items = items[start_idx:end_idx]
    
    text = f"üìã –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}):\n\n"
    for i, item in enumerate(page_items, start=start_idx + 1):
        text += f"{i}. {item['question']}\n"
    
    return text

async def show_faq_page(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0):
    faq_items = load_faq_data()
    total_pages = (len(faq_items) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    
    if not faq_items:
        await send_and_remember(
            update, context,
            text="–ò–∑–≤–∏–Ω–∏—Ç–µ, FAQ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
            reply_markup=get_back_keyboard()
        )
        return FAQ
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ FAQ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    context.user_data['faq_items'] = faq_items
    # –°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ FAQ
    context.user_data['faq_error_shown'] = False
    
    text = format_faq_page(faq_items, page)
    keyboard = get_faq_keyboard(page, total_pages)
    
    await send_and_remember(
        update, context,
        photo_path='images/FAQ.jpg',
        caption=text,
        reply_markup=keyboard
    )
    return FAQ

async def handle_faq_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_menu":
        from HANDLERS.common import send_main_menu
        return await send_main_menu(update, context)
    
    if query.data.startswith("faq_page_"):
        page = int(query.data.split("_")[-1])
        return await show_faq_page(update, context, page)
    
    if query.data.startswith("faq_answer_"):
        item_index = int(query.data.split("_")[-1])
        faq_items = context.user_data.get('faq_items', [])
        
        if 0 <= item_index < len(faq_items):
            item = faq_items[item_index]
            answer_text = f"‚ùì –í–æ–ø—Ä–æ—Å: {item['question']}\n\n‚úÖ –û—Ç–≤–µ—Ç: {item['answer']}"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ", –µ—Å–ª–∏ –µ—Å—Ç—å URL
            if 'url' in item:
                keyboard.append([InlineKeyboardButton("üîó –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ", url=item['url'])])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤
            keyboard.append([InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data=f"faq_page_{item_index // ITEMS_PER_PAGE}")])
            
            await query.edit_message_caption(
                caption=answer_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    return FAQ

async def handle_faq_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
    try:
        question_num = int(update.message.text)
        faq_items = context.user_data.get('faq_items', [])
        
        if 1 <= question_num <= len(faq_items):
            item = faq_items[question_num - 1]
            answer_text = f"‚ùì –í–æ–ø—Ä–æ—Å: {item['question']}\n\n‚úÖ –û—Ç–≤–µ—Ç: {item['answer']}"
            # –°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –±—ã–ª
            context.user_data['faq_error_shown'] = False
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = []
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ", –µ—Å–ª–∏ –µ—Å—Ç—å URL
            if 'url' in item:
                keyboard.append([InlineKeyboardButton("üîó –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ", url=item['url'])])
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤
            current_page = (question_num - 1) // ITEMS_PER_PAGE
            keyboard.append([InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data=f"faq_page_{current_page}")])
            await send_and_remember(
                update, context,
                text=answer_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.message.reply_text("‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.")
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ —Ü–∏—Ñ—Ä–∞–º–∏.")
    
    return FAQ 