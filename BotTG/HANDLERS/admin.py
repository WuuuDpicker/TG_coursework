from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from database import get_application_details, update_application_status
from UTILS.emails import send_admin_response_to_user
from states import *
import re

ADMIN_TELEGRAM_ID = 1595547276

async def process_admin_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –∑–∞—è–≤–∫—É
    –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: /respond <app_id> <response_code>
    –ö–æ–¥—ã –æ—Ç–≤–µ—Ç–æ–≤:
    1 - –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞
    0 - –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É  
    9 - –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞
    """
    if update.message.from_user.id != ADMIN_TELEGRAM_ID:
        await update.message.reply_text('‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return ConversationHandler.END
    
    text = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not text.startswith('/respond'):
        return ConversationHandler.END  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
    parts = text.split(' ', 2)  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ 3 —á–∞—Å—Ç–∏: /respond, app_id, response_code
    if len(parts) < 3:
        await update.message.reply_text(
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n'
            'üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /respond <app_id> <response_code>\n\n'
            'üìä –ö–æ–¥—ã –æ—Ç–≤–µ—Ç–æ–≤:\n'
            '1Ô∏è‚É£ - –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞\n'
            '0Ô∏è‚É£ - –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É\n'
            '9Ô∏è‚É£ - –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n\n'
            'üìã –ü—Ä–∏–º–µ—Ä: /respond 123 1'
        )
        return ConversationHandler.END
    
    try:
        app_id = int(parts[1])
        response_code = parts[2]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ—Ç–≤–µ—Ç –ø–æ –∫–æ–¥—É
        response_config = {
            '1': {
                'status': 'approved',
                'response': '‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ —Å–≤–æ–µ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.'
            },
            '0': {
                'status': 'processing',
                'response': '‚è≥ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.'
            },
            '9': {
                'status': 'rejected',
                'response': '‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã.'
            }
        }
        
        if response_code not in response_config:
            await update.message.reply_text(
                f'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response_code}\n\n'
                f'üìä –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–æ–¥—ã:\n'
                f'1Ô∏è‚É£ - –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞\n'
                f'0Ô∏è‚É£ - –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É\n'
                f'9Ô∏è‚É£ - –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'
            )
            return ConversationHandler.END
        
        status = response_config[response_code]['status']
        response = response_config[response_code]['response']
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        app_details = get_application_details(app_id)
        if not app_details:
            await update.message.reply_text(f'‚ùå –ó–∞—è–≤–∫–∞ #{app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
            return ConversationHandler.END
        
        app_id, specialty_code, specialty_title, old_status, submission_date, old_response, response_date, user_name, user_email = app_details
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_application_status(app_id, status, response)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ email
        email_success = send_admin_response_to_user(user_email, app_id, response)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        status_emoji = {
            'approved': '‚úÖ',
            'rejected': '‚ùå',
            'processing': '‚è≥'
        }.get(status, 'üìã')
        
        status_text = {
            'approved': '–û–¥–æ–±—Ä–µ–Ω–∞',
            'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞',
            'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'
        }.get(status, status)
        
        admin_message = f"""
{status_emoji} <b>–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>

üìã <b>ID –∑–∞—è–≤–∫–∏:</b> {app_id}
üë§ <b>–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç:</b> {user_name}
üìß <b>Email:</b> {user_email}
üéì <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b> {specialty_title} ({specialty_code})
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}
üí¨ <b>–û—Ç–≤–µ—Ç:</b> {response}

üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {'‚úÖ' if email_success else '‚ùå'}
        """
        
        await update.message.reply_text(admin_message, parse_mode='HTML')
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text('‚ùå ID –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!')
        return ConversationHandler.END
    except Exception as e:
        await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞: {str(e)}')
        return ConversationHandler.END

async def show_pending_applications(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–∑–æ–≤–∞ (message –∏–ª–∏ callback_query)
    message = getattr(update, 'message', None)
    if message is None and hasattr(update, 'callback_query') and update.callback_query:
        message = update.callback_query.message
    if message is None or message.from_user.id != ADMIN_TELEGRAM_ID:
        if message:
            await message.reply_text('‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫.')
        else:
            await update.callback_query.answer('‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫.', show_alert=True)
        return
    
    from database import connect_db
    
    conn = connect_db()
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
    cursor.execute("SELECT COUNT(*) FROM applications")
    total_applications = cursor.fetchone()[0]
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    ITEMS_PER_PAGE = 10
    total_pages = (total_applications + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    offset = page * ITEMS_PER_PAGE
    cursor.execute("""
        SELECT a.id, a.specialty_code, a.specialty_title, a.status, a.submission_date, u.name, u.email
        FROM applications a
        JOIN users u ON a.user_id = u.id
        ORDER BY a.submission_date DESC
        LIMIT ? OFFSET ?
    """, (ITEMS_PER_PAGE, offset))
    applications = cursor.fetchall()
    conn.close()
    
    if not applications:
        await message.reply_text('üìã –ó–∞—è–≤–æ–∫ –Ω–µ—Ç.')
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message.text = f"üìã <b>–ó–∞—è–≤–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):</b>\n\n"
    
    for app in applications:
        app_id, specialty_code, specialty_title, status, submission_date, user_name, user_email = app
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        if submission_date:
            try:
                from datetime import datetime
                sub_date = datetime.fromisoformat(submission_date.replace('Z', '+00:00'))
                formatted_date = sub_date.strftime('%d.%m.%Y %H:%M')
            except:
                formatted_date = submission_date
        else:
            formatted_date = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        status_emoji = {
            'submitted': 'üì§',
            'approved': '‚úÖ',
            'rejected': '‚ùå',
            'processing': '‚è≥'
        }.get(status, 'üìã')
        
        # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
        status_text = {
            'submitted': '–ü–æ–¥–∞–Ω–∞',
            'approved': '–û–¥–æ–±—Ä–µ–Ω–∞',
            'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞',
            'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'
        }.get(status, status)
        
        # –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        short_title = specialty_title[:25] + "..." if len(specialty_title) > 25 else specialty_title
        
        message.text += f"{status_emoji} <b>#{app_id}</b> - {user_name} ({status_text})\n"
        message.text += f"üéì {short_title} ({specialty_code})\n"
        message.text += f"üìß {user_email} | üìÖ {formatted_date}\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_page_{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"admin_page_{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_refresh")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await message.reply_text(message.text, parse_mode='HTML', reply_markup=reply_markup)

async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
    """
    user_id = update.effective_user.id
    if user_id != ADMIN_TELEGRAM_ID:
        await update.callback_query.answer('‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.', show_alert=True)
        return ConversationHandler.END
    
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("admin_page_"):
        page = int(query.data.split("_")[-1])
        await show_pending_applications(update, context, page)
    elif query.data == "admin_refresh":
        await show_pending_applications(update, context, 0)
    
    return ConversationHandler.END 