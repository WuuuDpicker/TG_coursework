from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import get_user_by_telegram_id, get_applications_by_user, update_user_photo, connect_db
from KEYBOARDS import get_profile_keyboard
from KEYBOARDS import get_main_menu_keyboard
from UTILS import send_and_remember, get_age_suffix
import os
import logging
from states import *
from HANDLERS.common import send_main_menu

logger = logging.getLogger(__name__)

async def handle_profile_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == 'profile':
        user = get_user_by_telegram_id(query.from_user.id)
        if user:
            applications = get_applications_by_user(user[0])
            profile_text, reply_markup = build_profile_text_and_keyboard(user, applications)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è (—Å—Ç–æ–∫–æ–≤–æ–µ, –µ—Å–ª–∏ –Ω–µ—Ç —Å–≤–æ–µ–≥–æ)
            photo_path = user[5] if user[5] and os.path.exists(user[5]) else 'images/logo_user.jpg'
            try:
                with open(photo_path, 'rb') as photo:
                    await query.message.reply_photo(photo=photo, caption=profile_text, reply_markup=reply_markup, parse_mode='HTML')
            except Exception:
                await query.message.reply_text(profile_text, reply_markup=reply_markup, parse_mode='HTML')
            return PROFILE
        else:
            await query.message.reply_text("‚ùóÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return MAIN_MENU
    elif data == 'edit_name':
        await send_and_remember(update, context, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
        return EDIT_NAME
    elif data == 'edit_email':
        await send_and_remember(update, context, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email:")
        return EDIT_EMAIL
    elif data == 'upload_photo':
        await send_and_remember(update, context, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ.")
        return UPLOAD_PHOTO
    elif data == 'back_profile':
        await send_and_remember(update, context, text="–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=get_main_menu_keyboard())
        await send_main_menu(update, context)
        return MAIN_MENU

async def edit_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_name = update.message.text.strip()
    if len(new_name.split()) < 3:
        await update.message.reply_text("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–í–∞—à–µ —Ñ–∞–º–∏–ª–∏—è –∏–º—è –æ—Ç—á–µ—Å—Ç–≤–æ).")
        return EDIT_NAME
    if not all(word[0].isupper() for word in new_name.split()):
        await update.message.reply_text("‚ùóÔ∏è –ü–µ—Ä–≤—ã–µ –±—É–∫–≤—ã –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏.")
        return EDIT_NAME
    telegram_id = update.message.from_user.id
    try:
        conn = connect_db()
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET name = ? WHERE telegram_id = ?", (new_name, telegram_id))
        conn.commit()
        conn.close()
        await update.message.reply_text("‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏: {e}")
        await update.message.reply_text("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    user = get_user_by_telegram_id(telegram_id)
    if user:
        applications = get_applications_by_user(user[0])
        profile_text, reply_markup = build_profile_text_and_keyboard(user, applications)
        await update.message.reply_text(profile_text, reply_markup=reply_markup, parse_mode='HTML')
        return PROFILE
    else:
        await update.message.reply_text("‚ùóÔ∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.")
        return MAIN_MENU

async def handle_upload_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .jpg, .jpeg –∏–ª–∏ .png.")
        return UPLOAD_PHOTO
    file = await update.message.photo[-1].get_file()
    file_path_on_server = file.file_path
    ext = file_path_on_server.split('.')[-1].lower()
    if ext not in ['jpg', 'jpeg', 'png']:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–æ—Ç–æ. –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .jpg, .jpeg, .png. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ –æ–¥–Ω–æ–º –∏–∑ —ç—Ç–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.")
        return UPLOAD_PHOTO
    os.makedirs('data/Logo_USERS', exist_ok=True)
    file_path = f"data/Logo_USERS/user_{update.effective_user.id}.{ext}"
    await file.download_to_drive(file_path)
    try:
        user = get_user_by_telegram_id(update.effective_user.id)
        if user:
            update_user_photo(user[0], file_path)
            await update.message.reply_text("‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            applications = get_applications_by_user(user[0])
            profile_text, reply_markup = build_profile_text_and_keyboard(user, applications)
            await update.message.reply_text(profile_text, reply_markup=reply_markup, parse_mode='HTML')
            return PROFILE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    return MAIN_MENU

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if len(name.split()) < 3:
        await update.message.reply_text("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–í–∞—à–µ —Ñ–∞–º–∏–ª–∏—è –∏–º—è –æ—Ç—á–µ—Å—Ç–≤–æ).")
        return GET_NAME
    if not all(word[0].isupper() for word in name.split()):
        await update.message.reply_text("‚ùóÔ∏è –ü–µ—Ä–≤—ã–µ –±—É–∫–≤—ã –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏.")
        return GET_NAME
    context.user_data['name'] = name
    await update.message.reply_text('üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à email.')
    return GET_EMAIL

async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    age_input = update.message.text.strip()
    try:
        day, month, year = map(int, age_input.split('.'))
        if year < 1900:
            await update.message.reply_text("–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ 1900.")
            return GET_AGE
        import datetime
        today = datetime.date.today()
        birth_date = datetime.date(year, month, day)
        if birth_date > today:
            await update.message.reply_text("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")
            return GET_AGE
        age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))
        if age < 0:
            await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return GET_AGE
        context.user_data['age'] = age
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        gender_keyboard = [
            [InlineKeyboardButton("‚ôÇÔ∏è –ú—É–∂—Å–∫–æ–π", callback_data='gender_male')],
            [InlineKeyboardButton("‚ôÄÔ∏è –ñ–µ–Ω—Å–∫–∏–π", callback_data='gender_female')]
        ]
        reply_markup = InlineKeyboardMarkup(gender_keyboard)
        await update.message.reply_text('‚ôÄÔ∏è‚ôÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:', reply_markup=reply_markup)
        return GET_GENDER
    except ValueError:
        await update.message.reply_text("‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥.")
        return GET_AGE

async def get_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    gender_map = {'gender_male': '–ú—É–∂—Å–∫–æ–π', 'gender_female': '–ñ–µ–Ω—Å–∫–∏–π' }
    gender = gender_map.get(query.data, '')
    if not gender:
        return GET_GENDER
    context.user_data['gender'] = gender
    telegram_id = context.user_data['telegram_id']
    name = context.user_data['name']
    email = context.user_data['email']
    age = context.user_data['age']
    from database import create_user, update_user_photo, get_user_by_telegram_id, get_applications_by_user
    try:
        user_id = create_user(telegram_id, name, email, age, gender)
        update_user_photo(user_id, 'images/logo_user.jpg')
    except Exception as e:
        import logging
        logging.getLogger(__name__).error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await query.message.reply_text("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return MAIN_MENU
    from HANDLERS.common import send_main_menu
    await send_main_menu(update, context)
    return MAIN_MENU

def build_profile_text_and_keyboard(user, applications):
    apps_text = ""
    if applications:
        apps_text = "\nüìã <b>–í–∞—à–∏ –∑–∞—è–≤–∫–∏:</b>\n"
        for app in applications:
            app_id, specialty_code, specialty_title, status, submission_date = app
            if submission_date:
                try:
                    from datetime import datetime
                    sub_date = datetime.fromisoformat(submission_date.replace('Z', '+00:00'))
                    formatted_date = sub_date.strftime('%d.%m.%Y %H:%M')
                except:
                    formatted_date = submission_date
            else:
                formatted_date = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            status_emoji = {
                'submitted': 'üì§',
                'approved': '‚úÖ',
                'rejected': '‚ùå',
                'processing': '‚è≥'
            }.get(status, 'üìã')
            status_text = {
                'submitted': '–ü–æ–¥–∞–Ω–∞',
                'approved': '–û–¥–æ–±—Ä–µ–Ω–∞',
                'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞',
                'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'
            }.get(status, status)
            short_title = specialty_title[:30] + "..." if len(specialty_title) > 30 else specialty_title
            apps_text += f"{status_emoji} <b>ID {app_id}</b> - {status_text}\n"
            apps_text += f"üéì {short_title} ({specialty_code})\n"
            apps_text += f"üìÖ {formatted_date}\n\n"
    else:
        apps_text = "\nüö´ <b>–ó–∞—è–≤–æ–∫ –Ω–µ—Ç</b>"
    profile_text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
        f"üìù –ò–º—è: {user[1]}\n"
        f"üìß Email: {user[2]}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user[3]} {get_age_suffix(user[3])}\n"
        f"‚ôÇÔ∏è‚ôÄÔ∏è –ü–æ–ª: {user[4]}\n"
        f"{apps_text}"
    )
    from KEYBOARDS.profile import get_profile_keyboard
    reply_markup = get_profile_keyboard()
    return profile_text, reply_markup
