from states import *
from telegram import Update, BotCommand, BotCommandScopeDefault, BotCommandScopeChat
from telegram.ext import ContextTypes, ConversationHandler
from UTILS import send_and_remember, clear_bot_message_ids
from KEYBOARDS import get_main_menu_keyboard, get_back_keyboard, get_submit_keyboard, get_status_keyboard, get_faq_keyboard, get_support_keyboard, get_about_keyboard, specialty_keyboard
import logging

logger = logging.getLogger(__name__)

ADMIN_TELEGRAM_ID = 1595547276

async def send_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–ª–∞–≥–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keys_to_remove = [k for k in context.user_data.keys() if k.startswith('text_error_shown_') or k == 'faq_error_shown']
    for k in keys_to_remove:
        context.user_data.pop(k, None)
    try:
        photo_path = 'images/menu.jpg'
        menu_caption = '–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ üè†'
        await send_and_remember(update, context, photo_path=photo_path, caption=menu_caption, reply_markup=get_main_menu_keyboard())
    except (FileNotFoundError, AttributeError):
        await send_and_remember(update, context, text='–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ üè†', reply_markup=get_main_menu_keyboard())
    return MAIN_MENU

async def handle_main_menu_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # await update.message.reply_text("‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
    return MAIN_MENU

async def error_handler(update, context):
    logger.error(msg="Exception while handling an update:", exc_info=context.error)
    # –û—á–∏—â–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –æ—à–∏–±–∫–µ
    if update and update.effective_chat:
        context.user_data['bot_message_ids'] = []
    # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

async def fallback_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from states import GET_NAME, GET_EMAIL, GET_AGE, GET_GENDER, EDIT_NAME, EDIT_EMAIL, CONFIRM_EMAIL, CONFIRM_EDIT_EMAIL, UPLOAD_PHOTO, FAQ, STATUS
    manual_input_states = {GET_NAME, GET_EMAIL, GET_AGE, GET_GENDER, EDIT_NAME, EDIT_EMAIL, CONFIRM_EMAIL, CONFIRM_EDIT_EMAIL, UPLOAD_PHOTO}
    current_state = context.user_data.get('current_state')
    # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª –∑–∞—è–≤–∫—É –ø–æ ID
    if current_state == STATUS and context.user_data.get('just_viewed_status'):
        context.user_data['just_viewed_status'] = False
        return STATUS
    # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –≥–¥–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
    if current_state in manual_input_states:
        return current_state
    if current_state == FAQ:
        if not context.user_data.get('faq_error_shown'):
            await update.message.reply_text("‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
            context.user_data['faq_error_shown'] = True
        return FAQ
    error_flag = f'text_error_shown_{current_state}'
    if not context.user_data.get(error_flag):
        await update.message.reply_text("‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        context.user_data[error_flag] = True
    return current_state if current_state is not None else ConversationHandler.END

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_and_remember(update, context, text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
    return await send_main_menu(update, context)

async def set_bot_commands_for_user(application, telegram_id):
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"),
        BotCommand("menu", "–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    ]
    if telegram_id == ADMIN_TELEGRAM_ID:
        commands += [
            BotCommand("applications", "–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫"),
            BotCommand("respond", "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞—è–≤–∫—É (/respond <id> <–∫–æ–¥>)")
        ]
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–∞ —Å –∞–¥–º–∏–Ω–æ–º (–ª–∏—á–Ω—ã–π —á–∞—Ç)
        await application.bot.set_my_commands(commands, scope=BotCommandScopeChat(chat_id=telegram_id))
    else:
        # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö ‚Äî —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        await application.bot.set_my_commands(commands, scope=BotCommandScopeDefault())

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == 'profile':
        from HANDLERS.profile import handle_profile_callback
        # –ü–µ—Ä–µ–¥–∞—ë–º update —Å query, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–ª profile
        return await handle_profile_callback(update, context)
    elif data == 'submit':
        from KEYBOARDS import specialty_keyboard
        markup = specialty_keyboard() if callable(specialty_keyboard) else specialty_keyboard
        await send_and_remember(
            update, context,
            photo_path='images/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å.jpg',
            caption='–í—ã–±–µ—Ä–∏—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08.02.01):',
            reply_markup=markup
        )
        return CHOOSE_SPECIALTY
    elif data == 'status':
        await send_and_remember(update, context, photo_path='images/status.jpg', caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏.", reply_markup=get_status_keyboard())
        return GET_APP_ID
    elif data == 'faq':
        from HANDLERS.faq import show_faq_page
        return await show_faq_page(update, context)
    elif data == 'support':
        await send_and_remember(update, context, photo_path='images/Support.jpg', caption="üõ†Ô∏è –î–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ @WuuuDpicker", reply_markup=get_support_keyboard())
        return SUPPORT
    elif data == 'about':
        await send_and_remember(update, context, photo_path='images/TheBot.jpg', caption="–û –±–æ—Ç–µ ü§ñ\n–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî AdmBOT , –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏!\n\nüìö –ß—Ç–æ —è —É–º–µ—é:\n‚úÖ –ü–æ–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ (–ø–∞—Å–ø–æ—Ä—Ç, –∞—Ç—Ç–µ—Å—Ç–∞—Ç, –º–µ–¥.—Å–ø—Ä–∞–≤–∫–∏ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.).\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ üîç.\n‚úÖ –û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã üí¨.\n‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ –∏ 24/7 üïí.", reply_markup=get_about_keyboard())
        return ABOUT
    elif data.startswith('back'):
        return await send_main_menu(update, context)
    elif data == 'upload_photo':
        from HANDLERS.profile import handle_upload_photo
        return await handle_upload_photo(update, context)
    elif data == 'edit_name':
        from HANDLERS.profile import edit_name
        return await edit_name(update, context)
    elif data == 'edit_email':
        from HANDLERS.email import edit_email
        return await edit_email(update, context)
    else:
        await query.message.reply_text('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.')
        return MAIN_MENU

async def handle_specialty_text_fallback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ choose_specialty —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª —Ç–µ–∫—Å—Ç
    return CHOOSE_SPECIALTY