from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from UTILS import send_confirmation_code, send_and_remember, is_valid_email, get_age_suffix
from database import get_user_by_telegram_id, connect_db, get_applications_by_user
from KEYBOARDS import get_email_confirm_keyboard, get_profile_keyboard
import random
import logging
from states import GET_EMAIL, EDIT_EMAIL, CONFIRM_EMAIL, CONFIRM_EDIT_EMAIL, GET_AGE, MAIN_MENU, PROFILE

logger = logging.getLogger(__name__)

async def get_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    email = update.message.text.strip()
    from telegram.ext import ConversationHandler
    if not is_valid_email(email):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –æ –∫–Ω–æ–ø–∫–∞—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â—ë –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏
        if not context.user_data.get('text_error_shown_1'):
            await update.message.reply_text("‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
            context.user_data['text_error_shown_1'] = True
        await update.message.reply_text("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.")
        return GET_EMAIL
    # –°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥ –æ—à–∏–±–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    context.user_data.pop('text_error_shown_1', None)
    context.user_data['email'] = email
    code = '{:03d}'.format(random.randint(0, 999))
    context.user_data['email_code'] = code
    context.user_data['resend_count'] = 0
    try:
        send_confirmation_code(email, code)
    except Exception as e:
        context.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
        await update.message.reply_text("‚ùóÔ∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π email.")
        return GET_EMAIL
    return await ask_email_code(update, context)

async def ask_email_code(update: Update, context: ContextTypes.DEFAULT_TYPE, edit=False):
    email = context.user_data.get('email') if not edit else context.user_data.get('edit_email')
    text = f'üìß –ù–∞ –ø–æ—á—Ç—É {email} –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ:'
    await send_and_remember(
        update, context,
        text=text,
        reply_markup=get_email_confirm_keyboard(edit=edit, resend=context.user_data.get('resend_count', 0) < 2)
    )
    return CONFIRM_EDIT_EMAIL if edit else CONFIRM_EMAIL

async def confirm_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    if code == context.user_data.get('email_code'):
        await update.message.reply_text('‚úÖ Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!')
        await update.message.reply_text('üìù –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.01.2000).')
        return GET_AGE
    else:
        await update.message.reply_text('‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
        return await ask_email_code(update, context)

async def confirm_email_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == 'change_email':
        await send_and_remember(update, context, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email:')
        return GET_EMAIL
    elif data == 'resend_code':
        email = context.user_data['email']
        code = '{:03d}'.format(random.randint(0, 999))
        context.user_data['email_code'] = code
        context.user_data['resend_count'] = context.user_data.get('resend_count', 0) + 1
        try:
            send_confirmation_code(email, code)
        except Exception as e:
            context.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
            await query.message.reply_text("‚ùóÔ∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π email.")
            return GET_EMAIL
        await query.message.reply_text('‚ÑπÔ∏è –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ.')
        return await ask_email_code(update, context)
    elif data == 'exit_email':
        from HANDLERS.common import send_main_menu
        await send_and_remember(update, context, text='‚ÑπÔ∏è –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email. –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.', reply_markup=None)
        await send_main_menu(update, context)
        from telegram.ext import ConversationHandler
        return ConversationHandler.END
    return CONFIRM_EMAIL

# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email:
async def edit_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_email = update.message.text.strip()
    from telegram.ext import ConversationHandler
    if not is_valid_email(new_email):
        if not context.user_data.get('text_error_shown_8'):
            await update.message.reply_text("‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
            context.user_data['text_error_shown_8'] = True
        await update.message.reply_text("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.")
        return EDIT_EMAIL
    context.user_data.pop('text_error_shown_8', None)
    context.user_data['edit_email'] = new_email
    code = '{:03d}'.format(random.randint(0, 999))
    context.user_data['edit_email_code'] = code
    context.user_data['resend_count'] = 0
    try:
        send_confirmation_code(new_email, code)
    except Exception as e:
        context.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
        await update.message.reply_text("‚ùóÔ∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π email.")
        return EDIT_EMAIL
    return await ask_email_code(update, context, edit=True)

async def confirm_edit_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    if code == context.user_data.get('edit_email_code'):
        telegram_id = update.message.from_user.id
        new_email = context.user_data['edit_email']
        try:
            conn = connect_db()
            cursor = conn.cursor()
            cursor.execute("UPDATE users SET email = ? WHERE telegram_id = ?", (new_email, telegram_id))
            conn.commit()
            conn.close()
            await update.message.reply_text("‚úÖ Email –æ–±–Ω–æ–≤–ª–µ–Ω!")
        except Exception as e:
            context.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è email: {e}")
            await update.message.reply_text("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        user = get_user_by_telegram_id(telegram_id)
        if user:
            applications = get_applications_by_user(user[0])
            apps_text = "–í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n" if applications else "–ó–∞—è–≤–æ–∫ –Ω–µ—Ç.\n"
            for app in applications:
                apps_text += f"ID: {app[0]}, –°—Ç–∞—Ç—É—Å: {app[1]}, –î–∞—Ç–∞: {app[2]}\n"
            profile_text = f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n–ò–º—è: {user[1]}\nEmail: {user[2]}\n–í–æ–∑—Ä–∞—Å—Ç: {user[3]} {get_age_suffix(user[3])}\n–ü–æ–ª: {user[4]}\n{apps_text}"
            edit_keyboard = [
                [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data='edit_name')],
                [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å email", callback_data='edit_email')],
                [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data='upload_photo')],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
            ]
            reply_markup = InlineKeyboardMarkup(edit_keyboard)
            await update.message.reply_text(profile_text, reply_markup=reply_markup)
            return PROFILE
        else:
            await update.message.reply_text("‚ùóÔ∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.")
            return MAIN_MENU
    else:
        await update.message.reply_text('‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
        return await ask_email_code(update, context, edit=True)

async def confirm_edit_email_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == 'change_email':
        await send_and_remember(update, context, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email:')
        return EDIT_EMAIL
    elif data == 'resend_code':
        email = context.user_data['edit_email']
        code = '{:03d}'.format(random.randint(0, 999))
        context.user_data['edit_email_code'] = code
        context.user_data['resend_count'] = context.user_data.get('resend_count', 0) + 1
        try:
            send_confirmation_code(email, code)
        except Exception as e:
            context.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
            await query.message.reply_text("‚ùóÔ∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π email.")
            return EDIT_EMAIL
        await query.message.reply_text('‚ÑπÔ∏è –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ.')
        return await ask_email_code(update, context, edit=True)
    elif data == 'exit_email':
        from HANDLERS.common import send_main_menu
        await send_and_remember(update, context, text='‚ÑπÔ∏è –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email. –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.', reply_markup=None)
        await send_main_menu(update, context)
        from telegram.ext import ConversationHandler
        return ConversationHandler.END
    return CONFIRM_EDIT_EMAIL