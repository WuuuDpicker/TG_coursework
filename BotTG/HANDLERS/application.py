from telegram import Update, Document, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import get_user_by_telegram_id, create_application, get_application_status, get_application_details, check_user_has_application_for_specialty
from UTILS import send_and_remember
from HANDLERS.common import send_main_menu
from states import *
import os
from UTILS.emails import send_documents_to_admin, send_documents_to_admin_with_user_data

ALLOWED_EXTENSIONS = {'.jpeg', '.jpg', '.png', '.doc', '.docx', '.pdf'}
ADMIN_EMAIL = 'WuuuDpicker@gmail.com'  # –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥

# –ü–µ—Ä–µ—á–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º
SPECIAL_DOCS = {
    '13.02.07': [
        'üÜî –ü–∞—Å–ø–æ—Ä—Ç/—É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—è)',
        'üìú –î–æ–∫—É–º–µ–Ω—Ç –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—è)',
        'üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è 3—Ö4',
        'üìã –°–ù–ò–õ–° (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—è)',
        'üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ (—Ñ–æ—Ä–º–∞ 086/–£)'
    ],
    '44.02.02': [
        'üÜî –ü–∞—Å–ø–æ—Ä—Ç/—É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—è)',
        'üìú –î–æ–∫—É–º–µ–Ω—Ç –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—è)',
        'üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è 3—Ö4',
        'üìã –°–ù–ò–õ–° (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—è)',
        'üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ (—Ñ–æ—Ä–º–∞ 086/–£)'
    ],
    '09.02.07': [
        'üÜî –ü–∞—Å–ø–æ—Ä—Ç/—É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—è)',
        'üìú –î–æ–∫—É–º–µ–Ω—Ç –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—è)',
        'üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è 3—Ö4',
        'üìã –°–ù–ò–õ–° (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—è)',
        'üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ (—Ñ–æ—Ä–º–∞ 086/–£)',
        'üî¨ –°–ø—Ä–∞–≤–∫–∞ –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞'
    ],
    '15.02.08': [
        'üÜî –ü–∞—Å–ø–æ—Ä—Ç/—É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—è)',
        'üìú –î–æ–∫—É–º–µ–Ω—Ç –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—è)',
        'üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è 3—Ö4',
        'üìã –°–ù–ò–õ–° (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—è)',
        'üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ (—Ñ–æ—Ä–º–∞ 086/–£)',
        'üîß –°–ø—Ä–∞–≤–∫–∞ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è'
    ],
    '23.02.07': [
        'üÜî –ü–∞—Å–ø–æ—Ä—Ç/—É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—è)',
        'üìú –î–æ–∫—É–º–µ–Ω—Ç –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—è)',
        'üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è 3—Ö4',
        'üìã –°–ù–ò–õ–° (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—è)',
        'üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ (—Ñ–æ—Ä–º–∞ 086/–£)',
        'üöó –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ (–∫–æ–ø–∏—è)'
    ],
    '43.02.15': [
        'üÜî –ü–∞—Å–ø–æ—Ä—Ç/—É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—è)',
        'üìú –î–æ–∫—É–º–µ–Ω—Ç –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—è)',
        'üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è 3—Ö4',
        'üìã –°–ù–ò–õ–° (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—è)',
        'üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ (—Ñ–æ—Ä–º–∞ 086/–£)',
        'üçΩÔ∏è –°–∞–Ω–∏—Ç–∞—Ä–Ω–∞—è –∫–Ω–∏–∂–∫–∞'
    ]
}
DEFAULT_DOCS = [
    'üÜî –ü–∞—Å–ø–æ—Ä—Ç/—É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—è)',
    'üìú –î–æ–∫—É–º–µ–Ω—Ç –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—è)',
    'üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è 3—Ö4',
    'üìã –°–ù–ò–õ–° (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—è)'
]

def get_required_docs(specialty_code):
    return SPECIAL_DOCS.get(specialty_code, DEFAULT_DOCS)

async def start_documents_upload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['documents'] = []
    specialty = context.user_data.get('specialty', {})
    specialty_code = specialty.get('code', '')
    specialty_title = specialty.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    required_docs = get_required_docs(specialty_code)
    context.user_data['required_docs'] = required_docs
    context.user_data['current_doc_idx'] = 0
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    doc_list = '\n'.join(f"{i+1}. {doc}" for i, doc in enumerate(required_docs))
    
    await update.callback_query.message.reply_text(
        f'üìã <b>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:</b>\n'
        f'üéì {specialty_title} ({specialty_code})\n\n'
        f'üìù <b>–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:</b>\n{doc_list}\n\n'
        f'üìÅ <b>–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b> .jpeg, .jpg, .png, .doc, .docx, .pdf\n\n'
        f'‚¨áÔ∏è <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç:</b>\n{required_docs[0]}',
        parse_mode='HTML'
    )
    return SUBMIT_DOCUMENTS

async def handle_document_upload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    document: Document = update.message.document
    idx = context.user_data.get('current_doc_idx', 0)
    required_docs = context.user_data.get('required_docs', DEFAULT_DOCS)
    
    if not document:
        await update.message.reply_text(f'‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è: {required_docs[idx]}')
        return SUBMIT_DOCUMENTS
    
    file_name = document.file_name
    ext = os.path.splitext(file_name)[1].lower()
    
    if ext not in ALLOWED_EXTENSIONS:
        await update.message.reply_text(
            '‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!\n\n'
            'üìÅ –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ: .jpeg, .jpg, .png, .doc, .docx, .pdf\n\n'
            f'‚¨áÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è: {required_docs[idx]}'
        )
        return SUBMIT_DOCUMENTS
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    file = await document.get_file()
    save_dir = 'data/user_docs'
    os.makedirs(save_dir, exist_ok=True)
    file_path = os.path.join(save_dir, f"{update.message.from_user.id}_{idx}_{file_name}")
    await file.download_to_drive(file_path)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫
    context.user_data['documents'].append((file_path, file_name, required_docs[idx-1]))
    idx += 1
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress = f"{idx}/{len(required_docs)}"
    progress_bar = "üü¢" * idx + "‚ö™" * (len(required_docs) - idx)
    
    if idx < len(required_docs):
        context.user_data['current_doc_idx'] = idx
        await update.message.reply_text(
            f'‚úÖ <b>–î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç!</b>\n\n'
            f'üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {progress}\n'
            f'{progress_bar}\n\n'
            f'‚¨áÔ∏è <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç:</b>\n{required_docs[idx]}',
            parse_mode='HTML'
        )
        return SUBMIT_DOCUMENTS
    else:
        # –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        await update.message.reply_text(
            f'üéâ <b>–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã!</b>\n\n'
            f'üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {progress}\n'
            f'{progress_bar}\n\n'
            f'üì§ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /finish',
            parse_mode='HTML'
        )
        return SUBMIT_DOCUMENTS

async def handle_finish_upload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user_by_telegram_id(update.message.from_user.id)
    specialty = context.user_data.get('specialty', {})
    specialty_title = specialty.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    specialty_code = specialty.get('code', '')
    files = context.user_data.get('documents', [])
    required_docs = context.user_data.get('required_docs', DEFAULT_DOCS)
    
    if len(files) < len(required_docs):
        await update.message.reply_text(
            '‚ùå –í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã!\n\n'
            f'üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(files)}/{len(required_docs)}\n'
            '‚¨áÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.'
        )
        return SUBMIT_DOCUMENTS
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞—è–≤–∫–∞ –Ω–∞ —ç—Ç—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å
        if check_user_has_application_for_specialty(user[0], specialty_code):
            await update.message.reply_text(
                f'‚ö†Ô∏è <b>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b>\n'
                f'üéì {specialty_title} ({specialty_code})\n\n'
                f'üìù –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥—Ä—É–≥—É—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å.',
                parse_mode='HTML'
            )
            await send_main_menu(update, context)
            return MAIN_MENU
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è email
        user_data = {
            'name': user[1],
            'email': user[2],
            'age': user[3],
            'gender': user[4],
            'telegram_id': update.message.from_user.id,
            'username': update.message.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        files_to_send = [(file_path, file_name) for file_path, file_name, _ in files]
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = send_documents_to_admin_with_user_data(
            ADMIN_EMAIL, 
            user_data, 
            specialty_title, 
            specialty_code, 
            files_to_send
        )
        
        if success:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
            app_id = create_application(user[0], specialty_code, specialty_title)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for file_path, _, _ in files:
                try:
                    os.remove(file_path)
                except Exception:
                    pass
            
            context.user_data['documents'] = []
            context.user_data['current_doc_idx'] = 0
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —Ä–∞–∑"
            keyboard = [
                [InlineKeyboardButton("üì§ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥—Ä—É–≥—É—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", callback_data="submit")],
                [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f'üéâ <b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞!</b>\n\n'
                f'üìã <b>ID –∑–∞—è–≤–∫–∏:</b> {app_id}\n'
                f'üéì <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b> {specialty_title}\n'
                f'üìä <b>–°—Ç–∞—Ç—É—Å:</b> –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ\n\n'
                f'üìß –î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n'
                f'‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n\n'
                f'üí° <b>–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ</b>',
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            
            return MAIN_MENU
        else:
            await update.message.reply_text(
                '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!\n\n'
                'üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
            )
            return SUBMIT_DOCUMENTS
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        await update.message.reply_text(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏!\n\n'
            'üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
        )
        return SUBMIT_DOCUMENTS

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    document = update.message.document
    file_id = document.file_id if document else None
    user = get_user_by_telegram_id(update.message.from_user.id)
    if user:
        try:
            app_id = create_application(user[0], file_id)
            await update.message.reply_text(f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞ —Å ID {app_id}. –î–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        except Exception as e:
            context.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            await update.message.reply_text("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await send_main_menu(update, context)
        return MAIN_MENU
    else:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
        return MAIN_MENU

async def get_app_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        app_id = int(update.message.text)
        app_details = get_application_details(app_id)
        
        if app_details:
            app_id, specialty_code, specialty_title, status, submission_date, admin_response, response_date, user_name, user_email = app_details
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø–æ–¥–∞—á–∏
            if submission_date:
                try:
                    from datetime import datetime
                    sub_date = datetime.fromisoformat(submission_date.replace('Z', '+00:00'))
                    formatted_sub_date = sub_date.strftime('%d.%m.%Y %H:%M')
                except:
                    formatted_sub_date = submission_date
            else:
                formatted_sub_date = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –æ—Ç–≤–µ—Ç–∞
            if response_date:
                try:
                    from datetime import datetime
                    resp_date = datetime.fromisoformat(response_date.replace('Z', '+00:00'))
                    formatted_resp_date = resp_date.strftime('%d.%m.%Y %H:%M')
                except:
                    formatted_resp_date = response_date
            else:
                formatted_resp_date = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"""
üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ #{app_id}</b>

üë§ <b>–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç:</b> {user_name}
üìß <b>Email:</b> {user_email}
üéì <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b> {specialty_title}
üìã <b>–ö–æ–¥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:</b> {specialty_code}
üìÖ <b>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:</b> {formatted_sub_date}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {get_status_text(status)}
            """
            
            if admin_response:
                message += f"""
üìÖ <b>–î–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞:</b> {formatted_resp_date}

üí¨ <b>–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>
{admin_response}
                """
            else:
                message += "\n‚è≥ <b>–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b> –û–∂–∏–¥–∞–µ—Ç—Å—è"
            
            await update.message.reply_text(message, parse_mode='HTML')
            # –°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥ –æ—à–∏–±–∫–∏ –¥–ª—è STATUS, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Å–ø–∞–º–∞
            context.user_data.pop('text_error_shown_17', None)
            context.user_data['just_viewed_status'] = True
            return STATUS
        else:
            await update.message.reply_text('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
            return STATUS
    except ValueError:
        await update.message.reply_text('‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.')
        return GET_APP_ID

def get_status_text(status):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å —ç–º–æ–¥–∑–∏"""
    status_dict = {
        'submitted': 'üì§ –ü–æ–¥–∞–Ω–∞',
        'approved': '‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞',
        'rejected': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞',
        'processing': '‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ'
    }
    return status_dict.get(status, status)